@page "/camera"
@inject HttpClient Client
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-sm">
            <button @onclick="StartCamera">Start Camera</button>
        </div>
        <div class="col-sm">
            <button @onclick="Snap">Capture</button>
            <button @onclick="DeleteLetter">Delete</button>
        </div>
    </div>
    <div class="row" style="margin-top:10px">
        <div class="video-wrap col-sm">
            <video id="video" playsinline autoplay></video>
        </div>
        <div class="col-sm">
            <canvas id="capturedImage" width="400" height="240"></canvas>
            <p class="display-4">@DisplayText</p>
        </div>
    </div>
</div>

@code {
    private List<string> capturedText = new List<string>();
    private string DisplayText = "";

    // Start camera capture
    private async Task StartCamera()
    {
        await JsRuntime.InvokeVoidAsync("Initialize", new Dictionary<string, string>
        {
                {"video", "video"}
        });
    }

    // Take a picture
    private async Task Snap()
    {
        Console.WriteLine("Taking picture");
        await JsRuntime.InvokeVoidAsync("Snap", "video", "capturedImage");

        var imageBytes = await JsRuntime.InvokeAsync<string>("GetImageData", "capturedImage", "image/jpeg");
        var json = JsonSerializer.Serialize(new Dictionary<string, string> { { "data", imageBytes } });

        var req = await Client.PostAsync("https://localhost:44330/api/prediction", new StringContent(json, Encoding.UTF8, "application/json"));
        var res = await req.Content.ReadAsStringAsync();
        var body = JsonSerializer.Deserialize<PredictionResponse>(res);

        AddLetter(body.Prediction);

        Console.WriteLine(capturedText.Count);

        foreach(var el in capturedText)
        {
            Console.WriteLine(el);
        }

        DisplayText = $"Text: {string.Join("",capturedText)}";
    }

    private void AddLetter(string letter)
    {
        capturedText.Add(letter);
    }

    private void DeleteLetter()
    {
        if(capturedText.Count > 0)
        {
            capturedText.RemoveAt(capturedText.Count - 1);
            DisplayText = $"Text: {string.Join("", capturedText)}";
        }

    }

    class PredictionResponse
    {
        [JsonPropertyName("prediction")]
        public string Prediction { get; set; }
    }
}
